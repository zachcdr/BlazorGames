@using Microsoft.AspNetCore.Components;
@using Quarantine.ExtensionMethods;
@using Quarantine.Models;
@using Quarantine.Models.Enums;

@if (Session != null)
{
    <div class="row" style="float: left;">
        <button type="button" @onclick="InvokeStats" style="padding-bottom: 0px;" class="btn"><span class="oi oi-pie-chart"></span></button>
    </div>
    <div class="row" style="float: right;">
        <label style="font-weight: bold;">@Session.SessionDate.ToShortDateString()</label>
    </div>
    <div style="margin-top: 2rem;">
        <label style="padding-right: 20px" for="availableDiaperContents">Diaper Contents: </label>
        <div name="availableDiaperContents">
            @foreach (var diaperType in ((DiaperType[])Enum.GetValues(typeof(DiaperType))).ToList())
            {
                var text = diaperType.GetDescription();
                <label class="switch">
                    <input type="checkbox" checked="@diaperContents.Contains(diaperType)" @onchange="eventArgs => { Toggle(diaperType); }">
                    <span class="slider round"></span>
                </label>
                @text <br />
            }
        </div>
        <div>
            <label style="padding-right: 20px" for="changer">Changer: </label>
            <select style="width: 55%;" name="changer" @onchange=@ChorerSelection>
                @foreach (var chorer in ((Chorer[])Enum.GetValues(typeof(Chorer))).ToList())
                {
                    <option value=@chorer>@chorer</option>
                }
            </select>
        </div>
        <div class="row justify-content-center" style="margin-top: 2rem;">
            @if (Session.IsMinDate)
            {
                <button class="btn btn-warning" disabled><span class="oi oi-caret-left"></span></button>
            }
            else
            {
                <button class="btn btn-warning" type="button" @onclick="async () => { await Cycle(DayCycleType.Previous); }"><span class="oi oi-caret-left"></span></button>
            }
            <button class="btn btn-success milk-start" type="button" @onclick="async () => { await ChangeDiaper(); }">Change Diaper  #@(Session.Total + 1)</button>
            @if (Session.IsMaxDate)
            {
                <button class="btn btn-warning" disabled><span class="oi oi-caret-right"></span></button>
            }
            else
            {
                <button class="btn btn-warning" type="button" @onclick="async () => { await Cycle(DayCycleType.Next); }"><span class="oi oi-caret-right"></span></button>
            }
        </div>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Contents</th>
                <th>Changed By</th>
                <th>Changed At</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var diaper in Session.DailyChanges)
            {
                <tr>
                    <td>
                        @foreach (var diaperType in diaper.DiaperTypes)
                        {
                            var text = diaperType.GetDescription();
                            @text<br />
                        }
                    </td>
                    <td>@diaper.Chorer?.GetDescription()</td>
                    <td>@GetFormattedDate(diaper.ChangeTimeUtc)</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<DiaperType> diaperContents = new List<DiaperType>();
    private Diaper diaperChange = new Diaper();

    [Parameter]
    public DiaperChangeView Session { get; set; }
    [Parameter]
    public EventCallback<Diaper> DiaperContents { get; set; }
    [Parameter]
    public EventCallback<DayCycleType> CycleDay { get; set; }
    [Parameter]
    public EventCallback<bool> ShowStats { get; set; }

    private Chorer chorer = Chorer.Kyleah;
    void ChorerSelection(ChangeEventArgs args)
    {
        Enum.TryParse(args.Value.ToString(), out Chorer user);
        chorer = user;
    }

    private async Task ChangeDiaper()
    {
        diaperChange.ChangeTimeUtc = DateTime.UtcNow;
        diaperChange.Chorer = chorer;
        diaperChange.DiaperTypes = diaperContents;
        await DiaperContents.InvokeAsync(diaperChange);
        diaperChange = new Diaper();
        diaperContents = new List<DiaperType>();
    }

    private string GetFormattedDate(DateTime? utcTime)
    {
        if (utcTime == null)
        {
            return "";
        }

        var zone = TimeZoneInfo.FindSystemTimeZoneById("Pacific Standard Time");

        return TimeZoneInfo.ConvertTimeFromUtc(Convert.ToDateTime(utcTime), zone).ToString("MM/dd/yyyy h:mm tt");
    }

    private void Toggle(DiaperType diaperType)
    {
        if (diaperContents.Contains(diaperType))
        {
            diaperContents.Remove(diaperType);
        }
        else
        {
            diaperContents.Add(diaperType);
        }
    }

    private async Task Cycle(DayCycleType dayCycleType)
    {
        await CycleDay.InvokeAsync(dayCycleType);
    }

    private async Task InvokeStats()
    {
        await ShowStats.InvokeAsync(true);
    }
}
