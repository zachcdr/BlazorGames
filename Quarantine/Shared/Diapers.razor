@using Microsoft.AspNetCore.Components;
@using Quarantine.ExtensionMethods;
@using Quarantine.Models;
@using Quarantine.Models.Enums;

@if (DiaperChanges != null)
{
    <div>
        <label style="padding-right: 20px" for="availableDiaperContents">Diaper Contents: </label>
        <div name="availableDiaperContents">
            @foreach (var diaperType in ((DiaperType[])Enum.GetValues(typeof(DiaperType))).ToList())
            {
                var text = diaperType.GetDescription();
                <label class="switch">
                    <input type="checkbox" checked="@diaperContents.Contains(diaperType)" @onchange="eventArgs => { Toggle(diaperType); }">
                    <span class="slider round"></span>
                </label>
                @text <br />
            }
        </div>
        <div>
            <label style="padding-right: 20px" for="changer">Changer: </label>
            <input type="radio" name="kyleah" id="@Chorer.Kyleah" value="@Chorer.Kyleah" @onchange="RadioSelection" checked=@(RadioValue == Chorer.Kyleah) />
            <label for="@Chorer.Kyleah">@Chorer.Kyleah.ToString()</label>
            <input type="radio" name="zach" id="@Chorer.Zach" value="@Chorer.Zach" @onchange="RadioSelection" checked=@(RadioValue == Chorer.Zach) />
            <label for="@Chorer.Zach">@Chorer.Zach.ToString()</label>
        </div>
        <button class="btn btn-success btn-block" type="button" @onclick="async () => { await ChangeDiaper(); }">Change Diaper #@(DiaperChanges.TotalDiaperChanges + 1)</button>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Contents</th>
                <th>Changed By</th>
                <th>Changed At</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var diaper in DiaperChanges.DiaperChanges)
            {
                <tr>
                    <td>
                        @foreach (var diaperType in diaper.DiaperTypes)
                        {
                            var text = diaperType.GetDescription();
                            @text<br />
                        }
                    </td>
                    <td>@diaper.Chorer?.GetDescription()</td>
                    <td>@GetFormattedDate(diaper.ChangeTimeUtc)</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<DiaperType> diaperContents = new List<DiaperType>();
    private Diaper diaperChange = new Diaper();

    [Parameter]
    public DiaperChangeView DiaperChanges { get; set; }
    [Parameter]
    public EventCallback<Diaper> DiaperContents { get; set; }

    Chorer RadioValue = Chorer.Kyleah;
    void RadioSelection(ChangeEventArgs args)
    {
        Enum.TryParse(args.Value.ToString(), out Chorer user);
        RadioValue = user;
    }

    private async Task ChangeDiaper()
    {
        diaperChange.ChangeTimeUtc = DateTime.UtcNow;
        diaperChange.Chorer = RadioValue;
        diaperChange.DiaperTypes = diaperContents;
        await DiaperContents.InvokeAsync(diaperChange);
        diaperChange = new Diaper();
        diaperContents = new List<DiaperType>();
    }

    private string GetFormattedDate(DateTime? utcTime)
    {
        if (utcTime == null)
        {
            return "";
        }

        var zone = TimeZoneInfo.FindSystemTimeZoneById("Pacific Standard Time");

        return TimeZoneInfo.ConvertTimeFromUtc(Convert.ToDateTime(utcTime), zone).ToString("MM/dd/yyyy h:mm tt");
    }

    private void Toggle(DiaperType diaperType)
    {
        if (diaperContents.Contains(diaperType))
        {
            diaperContents.Remove(diaperType);
        }
        else
        {
            diaperContents.Add(diaperType);
        }
    }
}
