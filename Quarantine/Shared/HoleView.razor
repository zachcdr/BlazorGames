@using Microsoft.AspNetCore.Components;
@using Quarantine.Models;
@using Quarantine.Models.Enums;

@if (Group != null)
{
    currentHole = Group.CurrentHole;
    <div>
        <h5>
            <b>#@currentHole</b>
            @if (Group.CourseName != null)
            {
                var course = CourseSelection.SelectCourse(Group.CourseName);
                course.SelectTees(Group.CourseTeeBox);
                var hole = course.GetHole(currentHole);
                <b>Par @hole.Par @(hole.Yards)yds @(hole.Handicap)hcp</b>
            }
        </h5>
    </div>
    <div id="accordion" class="maxwidth">
        @foreach (var golfer in Group.Golfers)
        {
            <div style="padding-bottom: 5px;">
                <div class="card">
                    <div class="card-header" id="headingOne">
                        <button class="btn btn-outline-dark btn-lg" style="width: 150px; font-size: 15px; font-weight: bold; padding: 13px;" 
                        @onclick="eventArgs => { Toggle(golfer.Id); }" data-toggle="collapse" data-target="#@golfer.Name" aria-expanded="true" aria-controls="@golfer.Name">
                            @golfer.Name
                        </button>
                        <input @bind="@golfer.Holes.Single(h => h.Id == currentHole).Score" type="tel" class="score-field" maxlength="2" onClick="this.select();">
                    </div>
                    @if (golfer.IsVisible)
                    {
                        <div id="@golfer.Name" aria-labelledby="headingOne" data-parent="#accordion">
                            <div class="card-body">
                                <GolferView DotTypes="@AvailableDots" CurrentHole="@currentHole" Golfer="@golfer"></GolferView>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        <div style="padding-bottom: 5px">
            <button class="btn btn-info btn-block" style="width: 100%;" type="button" @onclick="Next">Next</button>
        </div>
        <div style="padding-bottom: 5px">
            <button class="btn btn-warning btn-block" style="width: 100%;" type="button" @onclick="Previous">Previous</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public GolfGroup Group { get; set; }
    [Parameter]
    public List<DotType> AvailableDots { get; set; }
    [Parameter]
    public EventCallback<HoleUpdate> HoleUpdate { get; set; }
    private int currentHole;

    private async Task Previous()
    {
        if (currentHole > Group.Golfers.First().Holes.First().Id)
        {
            currentHole--;

            await PerformUpdate();
        }
    }

    private async Task Next()
    {
        if (currentHole < Group.Golfers.First().Holes.Last().Id)
        {
            currentHole++;

            await PerformUpdate();
        }
        else
        {
            await PerformUpdate(true);
        }
    }

    private void Toggle(int golferId)
    {
        if (Group.Golfers.Single(g => g.Id == golferId).IsVisible)
        {
            Group.Golfers.Single(g => g.Id == golferId).IsVisible = false;
        }
        else
        {
            Group.Golfers.ForEach(g => g.IsVisible = false);
            Group.Golfers.Single(g => g.Id == golferId).IsVisible = true;
        }
    }

    private async Task PerformUpdate(bool gameOver = false)
    {
        Group.Golfers.ForEach(g => g.IsVisible = false);
        await HoleUpdate.InvokeAsync(new Models.HoleUpdate() { Golfers = Group.Golfers, CurrentHole = currentHole, GroupId = Group.Id, CompleteGame = gameOver });
    }
}