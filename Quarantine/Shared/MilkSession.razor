@using Microsoft.AspNetCore.Components;
@using Quarantine.Models;
@using Quarantine.Models.Enums;
@using System.Threading;

@if (Session != null)
{
    <div style="padding: 5px">
        @if (Session.DailyMilks.Any(ps => ps.EndTimeUtc == null))
        {
            <EditForm Model="@handle" OnValidSubmit="@Finish">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="maxwidth">
                    <label for="volume">Volume: </label>
                    <input id="volume" @bind-value="@handle.Volume" class="jaq-input">
                    <button class="btn btn-danger btn-block" type="submit">Finish</button>
                </div>
            </EditForm>
        }
        else
        {
            <div class="row" style="float: right;">
                <label style="font-weight: bold;">@Session.SessionDate.ToShortDateString() Total: @Session.DailyVolume ml</label>
            </div>
            <div class="row justify-content-center" style="margin-top: 2rem;">
                @if (Session.IsMinDate)
                {
                    <button class="btn btn-warning" disabled><span class="oi oi-caret-left"></span></button>
                }
                else
                {
                    <button class="btn btn-warning" type="button" @onclick="async () => { await Cycle(DayCycleType.Previous); }"><span class="oi oi-caret-left"></span></button>
                }
                <button class="btn btn-success milk-start" type="button" @onclick="async () => { await StartOrFinish(MilkState.Start); }">Start  #@(Session.Total + 1)</button>
                @if (Session.IsMaxDate)
                {
                    <button class="btn btn-warning" disabled><span class="oi oi-caret-right"></span></button>
                }
                else
                {
                    <button class="btn btn-warning" type="button" @onclick="async () => { await Cycle(DayCycleType.Next); }"><span class="oi oi-caret-right"></span></button>
                }
            </div>
        }
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Start</th>
                <th>Duration</th>
                <th>Volume(ml)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pump in Session.DailyMilks)
            {
                <tr>
                    <td>@pump.StartTimePst.ToShortTimeString()</td>
                    <td>@pump.Duration</td>
                    <td>@pump.Volume</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private HandleMilk handle = new HandleMilk();

    [Parameter]
    public MilkSessionView Session { get; set; }
    [Parameter]
    public EventCallback<HandleMilk> HandleMilk { get; set; }
    [Parameter]
    public EventCallback<DayCycleType> CycleDay { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Timer();
    }

    private async Task StartOrFinish(MilkState pumpState)
    {
        handle.MilkState = pumpState;

        await HandleMilk.InvokeAsync(handle);
    }

    private async Task Finish()
    {
        await StartOrFinish(MilkState.Finish);
    }

    private async Task Cycle(DayCycleType dayCycleType)
    {
        await CycleDay.InvokeAsync(dayCycleType);
    }

    private async Task Timer()
    {
        while (true)
        {
            await Task.Run(() => Thread.Sleep(5000));

            await InvokeAsync(StateHasChanged);
        }
    }
}
