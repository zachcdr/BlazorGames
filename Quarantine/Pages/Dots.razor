@page "/dots/{GameId}"

@using Quarantine.Models;
@using Quarantine.Interfaces;
@using Quarantine.Shared;
@using Quarantine.Models.Enums;
@using System.Threading;
@inject IHandleGameState _gameState;
@inject NavigationManager navManager;
@inject IJSRuntime jsRuntime;

@if (dotsGame?.Game == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (dotsGame.Game.GameState == GameState.New)
    {
        <b>@dotsGame.Game.Name</b>

        @foreach (var group in dotsGame.Game.Groups)
        {
            <GolfGroupView Group="@group" GolfRoundType="@dotsGame.Game.GolfRoundType" NineType="@dotsGame.Game.NineType"></GolfGroupView>
            <br />
        }

        <div style="padding-bottom: 5px">
            <button class="maxwidth btn btn-danger btn-block" type="button" @onclick="Start">Start</button>
        </div>
    }
    else if (dotsGame.Game.GameState == GameState.InProgress)
    {
        <div class="card-body">
            <HoleView AvailableDots="@dotsGame.Game.DotTypes" Group="dotsGame.Game.Groups.First()" HoleUpdate="UpdateGame"></HoleView>
        </div>
    }
    <br />

    @if (dotsGame.Game.GameState != GameState.New)
    {
        <GolferScores Group="dotsGame.Game.Groups.First()" HoleUpdate="UpdateGame"></GolferScores>
    }
}

@code {
    [Parameter]
    public string GameId { get; set; }
    public IList<string> Options { get; set; }
    public Player NewPlayer = new Player();
    protected bool showScores = false;
    protected bool IsReplayDisabled = false;

    private Quarantine.Games.DotsGame dotsGame;

    protected override async Task OnInitializedAsync()
    {
        dotsGame = new Games.DotsGame(_gameState, new Guid(GameId));

        while (dotsGame.Game == null)
        {
            await Task.Run(() => Thread.Sleep(100));
        }
    }

    private async Task Start()
    {
        await dotsGame.Start();
        showScores = true;
    }

    private void Toggle(Guid groupId)
    {
        dotsGame.Game.Groups.ForEach(g => g.IsVisible = false);
        dotsGame.Game.Groups.Single(g => g.Id == groupId).IsVisible = true;
    }

    private async Task UpdateGame(HoleUpdate holeUpdate)
    {
        if (holeUpdate.CompleteGame)
        {
            string message = "";

            if (dotsGame.Game.Groups.Any(group => group.Golfers.Any(golfer => golfer.Holes.Any(hole => hole.Score == 0))))
            {
                message = "There are unentered scores within your group.\r\n";
            }

            if (!await jsRuntime.InvokeAsync<bool>("confirm", $"{message}Are you sure you wish to complete your round?"))
            {
                return;
            }
        }

        await dotsGame.UpdateHole(holeUpdate);

        await jsRuntime.InvokeVoidAsync("OnScrollEvent");
    }
}
