@page "/games/{GameId}"

@using Quarantine.Models;
@using Quarantine.Interfaces;
@using Quarantine.Shared;
@using Quarantine.Models.Enums;
@using System.Threading;
@using Microsoft.AspNetCore.WebUtilities;
@inject IHandleGameState _gameState;
@inject NavigationManager navManager;
@inject IJSRuntime jsRuntime;

@if (rideTheBus == null)
{
    <p><em>Loading...</em></p>
}
else
{

    @if (rideTheBus.GameState == GameState.New && NewPlayer.Id == 0 && rideTheBus.Players.Count < 10)
    {
        <EditForm Model="@NewPlayer" OnValidSubmit="@SubmitPlayer">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <p>
                <label for="playerName">Player Name: </label>
                <InputText id="playerName" @bind-Value="NewPlayer.Name"></InputText>
            </p>
            <button class="btn btn-success" disabled="@IsDisabled" type="submit">Join Game</button>
        </EditForm>
    }

    <h2>- @rideTheBus.Name -</h2>

    @if (ShowTable || (rideTheBus.GameState != GameState.Complete && (NewPlayer.Id == 0 || rideTheBus.GameState == GameState.New)))
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>State</th>
                    <th>Drinks</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var player in rideTheBus.Players)
                {
                    <tr>
                        <td><a @onclick="(async() => await SwitchPlayer(player.Name))">@player.Name</a></td>
                        <td>@player.State</td>
                        <td>@player.Drinks</td>
                    </tr>
                }
            </tbody>
        </table>
    }

    @if (rideTheBus.GameState == GameState.Complete)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>TotalDrinks</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var player in rideTheBus.Players.OrderByDescending(p => p.TotalDrinks))
                {
                    <tr>
                        <td>@player.Name</td>
                        <td>@player.TotalDrinks</td>
                    </tr>
                }
            </tbody>
        </table>
    }

    @if (rideTheBus.Players.Any(player => player.State == PlayerState.Turn))
    {
        var player = rideTheBus.Players.Single(player => player.State == PlayerState.Turn);

        <div style="padding: 5px" class="alert alert-success maxwidth">
            <b>It is @player.Name's turn</b>
        </div>
    }

    @if (NewPlayer.Id != 0)
    {
        <b>Playing as: @NewPlayer.Name</b>
    }

    @if (rideTheBus.Round == RideTheBusRounds.RideTheBus)
    {
        <h3>The Bus</h3>
        <PlayerCards Cards="@rideTheBus.Bus.ToList().GetRange(12,4)"></PlayerCards>
        <PlayerCards Cards="@rideTheBus.Bus.ToList().GetRange(8,4)"></PlayerCards>
        <PlayerCards Cards="@rideTheBus.Bus.ToList().GetRange(4,4)"></PlayerCards>
        <PlayerCards Cards="@rideTheBus.Bus.ToList().GetRange(0,4)"></PlayerCards>
    }

    @if (NewPlayer.Cards.Count() > 0)
    {
        <div style="padding-top: 25px"><h3>Your Cards</h3></div>

        @foreach (var player in rideTheBus.Players)
        {
            @if (player.Drinks > 0)
            {
                if (player == NewPlayer)
                {
                    <div style="padding: 5px" class="alert alert-danger maxwidth">
                        <b>@player.Name drink @player.Drinks</b>
                    </div>
                }
                else
                {
                    <div style="padding: 5px" class="alert alert-success maxwidth">
                        <b>@player.Name drink @player.Drinks</b>
                    </div>
                }
            }
        }

        <PlayerCards Cards="@NewPlayer.Cards"></PlayerCards>
    }

    @if (Options?.Count > 0)
    {
        @foreach (string option in Options)
        {
            <div class="maxwidth" style="padding: 5px">
                <button class="btn btn-primary btn-block" type="button" @onclick="(async() => { await SubmitTurn(option); })">@option</button>
            </div>
        }
    }

    @if (NewPlayer.IsAdmin && rideTheBus.GameState == GameState.New && rideTheBus.Players.Count > 1)
    {
        <div class="maxwidth" style="padding: 5px">
            <button class="btn btn-primary btn-block" type="button" @onclick="StartGame">Start Game</button>
        </div>
    }

    @if (NewPlayer.State == PlayerState.Turn && rideTheBus.GameState == GameState.InProgress && rideTheBus.Round != RideTheBusRounds.RideTheBus)
    {
        <div class="maxwidth" style="padding: 5px">
            <button class="btn btn-success btn-block" type="button" @onclick="PlayTurn">Play Turn</button>
        </div>
    }

    @if (NewPlayer.IsAdmin && rideTheBus.GameState != GameState.Complete && rideTheBus.Round == RideTheBusRounds.RideTheBus)
    {
        <div class="maxwidth" style="padding-top: 5px; padding-bottom: 50px">
            <button class="btn btn-danger btn-block" type="button" @onclick="PlayRideTheBus">Flip</button>
        </div>
    }
}

@code {
    [Parameter]
    public string GameId { get; set; }
    public IList<string> Options { get; set; }
    public Player NewPlayer = new Player() { State = PlayerState.WaitingTurn };
    public bool ShowTable = false;
    protected bool IsDisabled = false;

    private Quarantine.Games.RideTheBusGame rideThebusBusGame;
    private Models.RideTheBus rideTheBus;

    protected override async Task OnInitializedAsync()
    {
        var uri = navManager.ToAbsoluteUri(navManager.Uri);

        var name = "";

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("name", out var param))
        {
            name = param.First();
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("showtable", out var show))
        {
            ShowTable = true;
        }

        rideThebusBusGame = new Games.RideTheBusGame(_gameState, new Guid(GameId));

        while (rideThebusBusGame.Game == null)
        {
            await Task.Run(() => Thread.Sleep(500));
        }

        rideTheBus = rideThebusBusGame.Game;

        if (!string.IsNullOrWhiteSpace(name))
        {
            NewPlayer = rideThebusBusGame.Game.Players.Single(player => player.Name.ToLower() == name.ToLower());

            if (NewPlayer.State == PlayerState.PlayingTurn)
            {
                NewPlayer.State = PlayerState.Turn;
            }
        }

        Refresh();
    }

    private async Task SubmitPlayer()
    {
        IsDisabled = true;

        if (!rideTheBus.Players.Any(p => p.Name.ToLower() == NewPlayer.Name.ToLower()))
        {

            await rideThebusBusGame.Join(NewPlayer);

            var query = new Dictionary<string, string> { { "name", NewPlayer.Name } };

            navManager.NavigateTo(QueryHelpers.AddQueryString($"/games/{rideThebusBusGame.Game.Id}", query));
        }

        IsDisabled = false;
    }

    private async void Refresh()
    {
        while (true)
        {
            if (string.IsNullOrWhiteSpace(NewPlayer.Name) || NewPlayer.State == Models.Enums.PlayerState.WaitingTurn)
            {
                var loadedGame = await rideThebusBusGame.Load();

                if (loadedGame.LastModified > rideTheBus.LastModified)
                {
                    rideTheBus = loadedGame;

                    if (NewPlayer.Id > 0)
                    {
                        NewPlayer = loadedGame.Players.Single(player => player.Name == NewPlayer.Name);
                    }

                    StateHasChanged();
                }
            }

            await Task.Run(() => Thread.Sleep(1500));
        }
    }

    private async Task StartGame()
    {
        await rideThebusBusGame.Deal();
        await rideThebusBusGame.Start();
    }

    private async Task PlayTurn()
    {
        Options = await rideThebusBusGame.Play();
    }

    private async Task PlayRideTheBus()
    {
        await rideThebusBusGame.PlayRideTheBus();
    }

    private async Task SubmitTurn(string choice)
    {
        await rideThebusBusGame.SubmitTurn(choice);
        Options = null;
    }

    private async Task SwitchPlayer(string name)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to play as {name}?");

        if (confirmed)
        {

            rideTheBus = await rideThebusBusGame.PlayerSwitch(name);

            NewPlayer = rideTheBus.Players.Single(player => player.Name == name);

            var query = new Dictionary<string, string> { { "name", name } };

            navManager.NavigateTo(QueryHelpers.AddQueryString($"/games/{GameId}", query));

            Options = null;

            StateHasChanged();
        }
    }
}
