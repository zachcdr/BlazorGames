@page "/ridethebus"

@using Quarantine.Interfaces;
@using Quarantine.Services;
@using Quarantine.Models;
@using Quarantine.Games;
@using Quarantine.Responses;
@using Microsoft.AspNetCore.WebUtilities;
@inject IHandleRetreivingGames _iServiceGames;
@inject IHandleGameState _gameState;
@inject NavigationManager NavigationManager;
@inject IJSRuntime jsRuntime;

<h1>Ride The Bus</h1>

<p>Lists all existing and previous Ride The Bus games.</p>

@if (ServiceResponse != null && !ServiceResponse.IsSuccess)
{
    <div class="alert alert-danger">
        @ServiceResponse.Message
    </div>
}

@if (ServiceResponse?.Data == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <EditForm Model="@NewGame" OnValidSubmit="@SubmitNewGame">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <p>
            <label for="playerName">Player Name: </label>
            <InputText id="playerName" @bind-Value="NewGame.PlayerName"></InputText>
        </p>
        <p>
            <label for="gameName">Game Name: </label>
            <InputText id="gameName" @bind-Value="NewGame.GameName"></InputText>
        </p>
        <p>
            <label style="padding-right: 20px" for="password">Password: </label>
            <InputText id="password" @bind-Value="NewGame.Password"></InputText>
        </p>
        <div style="padding-bottom: 25px"><button class="btn btn-primary" type="submit">Create Game</button></div>
    </EditForm>

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Game Type</th>
                <th>Game State</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var game in ServiceResponse?.Data)
            {
                <tr>
                    <td @onclick="(async() => await JoinGame(game))" style="color: blue; cursor: pointer;">@game.Name</td>
                    <td>@game.GameType</td>
                    <td>@game.GameState</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private GameService _gameService;
    private RideTheBusGame rideThebusBusGame;
    private ServiceResponse<IList<GameDetails>> ServiceResponse;

    private InitiateGame NewGame = new InitiateGame();

    protected override async Task OnInitializedAsync()
    {
        _gameService = new GameService(_iServiceGames);

        ServiceResponse = await _gameService.GetGames(Models.Enums.GameType.RideTheBus);
    }

    private async Task SubmitNewGame()
    {
        rideThebusBusGame = new RideTheBusGame(_gameState);

        rideThebusBusGame.AssignName(NewGame.GameName.Trim(), NewGame.Password);

        await rideThebusBusGame.Join(new Drinker() { Name = NewGame.PlayerName.Trim() });

        var query = new Dictionary<string, string> { { "name", NewGame.PlayerName.Trim() } };

        NavigationManager.NavigateTo(QueryHelpers.AddQueryString($"/ridethebus/{rideThebusBusGame.Game.Id}", query));
    }

    private async Task JoinGame(GameDetails game)
    {
        if (game.IsPasswordProtected)
        {
            string input = await jsRuntime.InvokeAsync<string>("passwordPrompt.showPrompt", "Enter Password (case sensitive)");

            if (input == game.Password)
            {
                NavigationManager.NavigateTo($"/ridethebus/{game.Id}");
            }
        }
        else
        {
            NavigationManager.NavigateTo($"/ridethebus/{game.Id}");
        }
    }
}
