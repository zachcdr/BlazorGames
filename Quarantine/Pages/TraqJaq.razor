@page "/traqjaq"

@using Quarantine.Interfaces;
@using Quarantine.Services;
@using Quarantine.ExtensionMethods;
@using Quarantine.Models;
@using Quarantine.Models.Enums;
@using Quarantine.Responses;
@inject IHandleRetreivingGames _iServiceGames;
@inject IHandleGameState _gameState;

<h1>TraqJaq</h1>

<p>A simple solution to monitoring all things Jaq</p>

@if (ServiceResponse != null && !ServiceResponse.IsSuccess)
{
    <div class="alert alert-danger">
        @ServiceResponse.Message
    </div>
}

@if (traqJaqService == null || traqJaqService.IsLoaded == false)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (password != "12121")
    {
        <div class="maxwidth">
            <label for="password">Password: </label>
            <input id="password" @bind="@password" class="maxwidth" type="password">
        </div>
    }
    else
    {
        @foreach (var traqView in traqJaqService.TraqTypeViews)
        {
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <button class="btn btn-link" @onclick="eventArgs => { Toggle(traqView.TraqType); }">
                            @traqView.TraqType.GetDescription()
                        </button>
                    </h5>
                </div>
                @if (traqView.IsVisible)
                {
                    <div>
                        <div class="card-body">
                            @switch (traqView.TraqType)
                            {
                                case TraqType.Medicine:
                                    <Medications Meds="traqJaqService.GetMedications()" MedicineType="UpdateMedicine"></Medications>
                                    break;
                                case TraqType.Pump:
                                    <Pumps PumpSessions="traqJaqService.GetPumpSessions()" StartOrFinish="UpdatePump"></Pumps>
                                    break;
                            }
                        </div>
                    </div>
                }
            </div>
        }
    }
}

@code {
    private GameService gameService;
    private TraqJaqService traqJaqService;
    private ServiceResponse<IList<GameDetails>> ServiceResponse;
    private string password;
    private bool isAuthenticated = true;

    protected override async Task OnInitializedAsync()
    {
        gameService = new GameService(_iServiceGames);

        ServiceResponse = await gameService.GetGames(Models.Enums.GameType.TraqJaq);

        traqJaqService = new TraqJaqService(_gameState, ServiceResponse.Data?.FirstOrDefault()?.Id);

        await traqJaqService.Loading();
    }

    private void Toggle(TraqType traqType)
    {
        traqJaqService.ToggleTraq(traqType);
    }

    private async Task UpdateMedicine(MedicationType medicationType)
    {
        await traqJaqService.UpdateMedicine(medicationType);
    }

    private async Task UpdatePump(PumpState pumpState)
    {
        await traqJaqService.UpdatePump(pumpState);
    }
}

